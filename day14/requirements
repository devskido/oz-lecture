# DAY14 : 타이머 만들기 - 비동기 실습

[fetch api 예제](https://www.notion.so/fetch-api-229caf5650aa80bc80bdf20b790f5b04?pvs=21)

## 과제 개요

이번 수업에서 비동기 처리(`setTimeout`, `setInterval`, `Promise`, `async/await`, `fetch API`)를 학습했습니다. 학생들은 동기/비동기 개념, 콜백, 이벤트 루프, API 호출을 익혔으며, HTML/CSS, 부트스트랩, JavaScript의 연산자, 조건문, 반복문, 함수, 배열, 객체를 이미 이해하고 있습니다. 기본 과제는 **HTML 화면에 출력되는 카운트다운 타이머**를 구현하며, 도전 과제는 **JSONPlaceholder API를 사용한 다중 데이터 가져오기**를 구현합니다. 모든 출력과 인터랙션은 HTML 화면에서 이루어지며, 콘솔 출력은 사용하지 않습니다. 초보자 친화적으로 설계되었으며, 기본 HTML 파일을 제공하되 학생들은 디자인을 커스텀할 수 있습니다. 제출은 GitHub 링크로 받습니다.

# 기본 과제 요구사항

1. **파일 구성**
    - **JavaScript 파일**: `async_assignment.js`
    - **HTML 파일**: `index.html` (아래 제공, 디자인 커스텀 가능)
    - **CSS**: 부트스트랩 사용 권장, 추가 스타일링은 `style.css` 또는 인라인 CSS.
    - **파일 구조**:
        
        ```
        async-assignment/
        ├── index.html
        ├── async_assignment.js
        ├── style.css (선택)
        
        ```
        
2. **제공된 HTML 파일**
    - 학생들은 아래 HTML을 사용하며, CSS/부트스트랩으로 디자인 커스텀 가능.
    
    ```html
    <!DOCTYPE html>
    <html lang="ko">
      <head>
        <meta charset="UTF-8" />
        <title>Countdown Timer</title>
        <link
          href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
          rel="stylesheet"
        />
        <style>
          .container {
            max-width: 600px;
            margin-top: 50px;
            text-align: center;
          }
          #timerDisplay {
            font-size: 24px;
            margin-top: 20px;
          }
          .error {
            color: red;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <h1>카운트다운 타이머</h1>
          <div class="mb-3">
            <input
              type="number"
              id="timerInput"
              class="form-control"
              min="1"
              max="10"
              placeholder="1-10초 입력"
            />
          </div>
          <button id="startTimer" class="btn btn-primary">타이머 시작</button>
          <div id="timerDisplay" class="mt-3"></div>
        </div>
        <script src="async_assignment.js"></script>
      </body>
    </html>
    ```
    
3. **기능 요구사항**
    - **목표**: 사용자가 HTML 입력란에 입력한 초(1~10)로 카운트다운 타이머를 구현하고, HTML 화면에 결과 출력.
    - **프로그램 흐름**:
        - 제공된 HTML의 입력란(`#timerInput`)에 숫자 입력, 시작 버튼(`#startTimer`) 클릭.
        - 유효한 입력(1~10) 시 타이머 시작, `#timerDisplay`에 초 단위로 카운트다운 표시.
        - 유효하지 않은 입력(숫자 아님, 1~10 외, 빈 값) 시 `#timerDisplay`에 에러 메시지 출력.
        - 타이머 종료 시 `#timerDisplay`에 "타이머 종료!" 출력.
        - 타이머 실행 중 시작 버튼 비활성화, 종료 후 재활성화.
        - 모든 출력은 HTML 화면(`#timerDisplay`)에서 표시.
    - **출력 정보**:
        - HTML:
            - 진행: `타이머: X초`
            - 종료: `타이머 종료!`
            - 에러: `유효한 숫자(1-10)를 입력하세요!` (`.error` 클래스로 빨간색 표시)
    - **구현 요구사항**:
        - **변수 선언**: `var`, `let`, `const` 각각 최소 1회 사용(예: `const MAX_TIME = 10`, `let timerCount`, `var timerMessage`).
        - **반복문**: `setInterval`로 타이머 구현, 입력 처리는 `click` 이벤트 리스너 사용.
        - **함수**: 함수 선언문(예: `function startTimer(seconds)`)으로 타이머 로직 구현, 매개변수 기본값 사용(예: `seconds = 10`).
        - **조건문과 연산자**: `if`로 입력 유효성 검사, `isNaN`, `>=`, `<=`, `&&` 사용.
        - **비동기 처리**: `setInterval`로 타이머 구현, `clearInterval`로 종료.
        - **DOM 조작**:
            - 입력값: `document.getElementById("timerInput").value`
            - 출력: `document.getElementById("timerDisplay").textContent`
            - 버튼 비활성화: `document.getElementById("startTimer").disabled = true`
            - 에러 스타일: `document.getElementById("timerDisplay").classList.add("error")`
        - **출력 예시**:
            
            ```
            [입력: 5, 버튼 클릭]
            HTML: 타이머: 5초
            ...
            HTML: 타이머 종료!
            [입력: abc 또는 11]
            HTML: 유효한 숫자(1-10)를 입력하세요! (빨간색)
            
            ```
            
    - **구현 선택**:
        - 입력 유효성 검사는 `if` 또는 `switch` 자유.
        - 부트스트랩 클래스(`form-control`, `btn-primary`) 유지 또는 커스텀.
        - CSS로 레이아웃, 색상, 폰트 등 자유롭게 개선(예: 타이머 색상 애니메이션, 버튼 호버 효과).
4. **실행 환경**
    - 브라우저에서 `index.html` 실행.
    - 개발자 도구(F12)로 디버깅 가능하지만, 출력은 HTML 화면에서만 확인.
5. **제출 방식**
    - GitHub 레포지토리에 프로젝트 업로드.
    - 레포지토리 링크 제출.
    - `README.md`에 프로젝트 설명, 실행 방법, 디자인 커스텀 내역 포함.

## 주의사항

- **JavaScript 문법**: `var`, `let`, `const`, 기본 자료형, 연산자, 조건문, 반복문, 함수, 배열, 객체, `setInterval`만 사용. DOM 조작 필수. 콘솔 출력 금지.
- **코드 가독성**: 들여쓰기와 주석(`//`)으로 로직 설명(예: `// 타이머 시작`, `// 입력 유효성 검사`).
- **테스트**: 입력, 타이머 출력, 버튼 비활성화/활성화, 에러 메시지가 HTML 화면에서 정확히 작동하는지 확인.
- **입력 처리**: 입력란 값은 `Number()`로 변환, 유효하지 않은 입력(빈 값, 1~10 외) 처리 필수.

</xaiArtifact>

# 도전 과제 (선택)

기본 과제를 완료한 학생들은 다중 데이터 가져오기를 연습하세요.

1. **파일 구성**
    - **JavaScript 파일**: `async_assignment_challenge.js`
    - **HTML 파일**: `index_challenge.html` (아래 제공, 디자인 커스텀 가능)
    - **CSS**: 부트스트랩 사용 권장, 추가 스타일링은 `style_challenge.css` 또는 인라인 CSS.
    - **파일 구조**:
        
        ```
        async-assignment-challenge/
        ├── index_challenge.html
        ├── async_assignment_challenge.js
        ├── style_challenge.css (선택)
        
        ```
        
2. **제공된 HTML 파일**
    - 학생들은 아래 HTML을 사용하며, CSS/부트스트랩으로 디자인 커스텀 가능.
    
    ```html
    <!DOCTYPE html>
    <html lang="ko">
      <head>
        <meta charset="UTF-8" />
        <title>Fetch Multiple Posts</title>
        <link
          href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
          rel="stylesheet"
        />
        <style>
          .container {
            max-width: 600px;
            margin-top: 50px;
          }
          .post {
            border-bottom: 1px solid #ccc;
            padding: 10px;
          }
          .error {
            color: red;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <h1>게시물 가져오기</h1>
          <div class="mb-3">
            <input
              type="text"
              id="postIds"
              class="form-control"
              placeholder="ID 입력 (예: 1,2,3)"
            />
          </div>
          <button id="fetchPosts" class="btn btn-primary">게시물 가져오기</button>
          <div id="output" class="mt-3"></div>
        </div>
        <script src="async_assignment_challenge.js"></script>
      </body>
    </html>
    
    ```
    
3. **기능 요구사항**
    - **목표**: 사용자가 HTML 입력란에 쉼표로 구분한 게시물 ID(1~100)를 입력하여 JSONPlaceholder API에서 데이터를 가져오고, HTML 화면에 렌더링.
    - **프로그램 흐름**:
        - 제공된 HTML의 입력란(`#postIds`)에 ID 입력(예: "1,2,3"), 가져오기 버튼(`#fetchPosts`) 클릭.
        - 유효한 ID(1~100)만 필터링, `fetch`로 데이터 가져와 객체에 저장.
        - 결과를 `#output`에 렌더링(각 게시물은 `.post` 클래스로 구분).
        - 유효하지 않은 입력(숫자 아님, 범위 외, 빈 값) 시 `#output`에 에러 메시지 출력.
        - 데이터 가져오는 동안 버튼 비활성화, 완료 후 재활성화.
        - 모든 출력은 HTML 화면(`#output`)에서만 표시, 콘솔 출력 사용 금지.
    - **출put 정보**:
        - HTML:
            - 성공: `<div class="post">post1: [제목]</div>`
            - 에러: `<div class="post">postX: 에러: [메시지]</div>` 또는 `유효한 ID(1-100)를 입력하세요!` (`.error` 클래스로 빨간색 표시)
    - **구현 요구사항**:
        - **변수 선언**: `var`, `let`, `const` 각각 최소 1회 사용.
        - **함수**:
            - 화살표 함수(`fetchMultiplePosts`)로 데이터 가져오기, `...rest`로 ID 처리.
            - 함수 표현식(`runChallenge`)로 메인 로직 구현.
        - **반복문**: `for...of`로 ID 순회, `for...in`로 결과 객체 순회.
        - **비동기 처리**: `fetch`와 `async/await` 사용, `try/catch`로 에러 처리.
        - **DOM 조작**:
            - 입력값: `document.getElementById("postIds").value`
            - 출력: `document.getElementById("output").innerHTML`
            - 버튼 비활성화: `document.getElementById("fetchPosts").disabled = true`
            - 에러 스타일: `document.getElementById("output").classList.add("error")`
        - **...rest**: 여러 ID를 배열로 처리.
        - **출력 예시**:
            
            ```
            [입력: 1,2,3, 버튼 클릭]
            HTML:
            post1: sunt aut facere...
            post2: qui est esse...
            post3: ea molestias...
            [입력: abc 또는 101]
            HTML: 유효한 ID(1-100)를 입력하세요! (빨간색)
            
            ```
            
    - **구현 선택**:
        - 입력은 쉼표로 구분, `split()`과 `map(Number)`로 처리.
        - 부트스트랩 클래스(`form-control`, `btn-primary`, `post`) 유지 또는 커스텀.
        - CSS로 출력 영역의 테두리, 간격, 색상 등 자유롭게 개선(예: 게시물 호버 효과, 에러 애니메이션).
4. **실행 환경**
    - 브라우저에서 `index_challenge.html` 실행.
    - 개발자 도구(F12)로 디버깅 가능하지만, 출력은 HTML 화면에서만 확인.
5. **제출 방식**
    - GitHub 레포지토리에 프로젝트 업로드.
    - 레포지토리 링크 제출.

## 주의사항

- **JavaScript 문법**: `var`, `let`, `const`, 기본 자료형, 연산자, 조건문, 반복문, 함수, 배열, 객체, `Promise`, `async/await`, `fetch`만 사용. DOM 조작 필수. 콘솔 출력 금지.
- **코드 가독성**: 들여쓰기와 주석(`//`)으로 로직 설명(예: `// 데이터 가져오기`, `// 결과 렌더링`).
- **테스트**: 입력 처리, 데이터 출력, 버튼 비활성화/활성화, 에러 메시지가 HTML 화면에서 정확히 작동하는지 확인.
- **입력 처리**: 입력값을 `split(",")`로 분리, `Number()`로 변환, 유효하지 않은 입력(빈 값, 1~100 외) 처리 필수.